const fs = require('fs')
const semver = require('semver');
// https://stackoverflow.com/questions/6832596/how-to-compare-software-version-number-using-js-only-number
const csv = require('csvtojson')

const datasetDir = '../../dataset/';

let keys = new Set();

async function simplifyCveFile(vulnarabilityDataset) {
    let cveList = [];
    for (let cve of vulnarabilityDataset.CVE_Items) {
        if (cve.cve) {
            let newCve = {
                description: cve.cve.description,
                configurations: cve.configurations
            }
            cveList.push(newCve);
        }
    }
    return cveList;
}

//todo fix this + generate condition.
async function cveParser(cveList) {
    let vulnarabilityList = []
    for (let cve of cveList) {
        let affectedVersions = []
        for (let version of cve.configurations.nodes) {
            if (version.children) {
                for (let v of version.children) {
                    for (let cpe of v.cpe_match) {
                        if (cpe.cpe23Uri.includes(':chrome:'))
                            affectedVersions.push(cpe)
                        if (cpe.cpe23Uri.includes(':firefox:'))
                            affectedVersions.push(cpe)
                    }
                }
            } else {
                for (let cpe of version.cpe_match) {
                    if (cpe.cpe23Uri.includes(':chrome:'))
                        affectedVersions.push(cpe)
                    if (cpe.cpe23Uri.includes(':firefox:'))
                        affectedVersions.push(cpe)
                }
            }
        }
        if (affectedVersions.length == 0)
            continue;


        for (let obj of affectedVersions) {
            for (let key of Object.keys(obj))
                keys.add(key)
        }


        let extractedData = {
            affectedVersions: affectedVersions,
            description: cve.cve.description.description_data[0].value,
            // publishDate: cve.publishedDate,
            // severity: cve.impact.baseMetricV2.severity
        }
        // console.log(extractedData)
        vulnarabilityList.push(extractedData);
    }
    return vulnarabilityList;
}

//todo write this
async function isVulnerable(browser, version, condition) {

}

async function findVulnarabilitiesPerBrowser(browserVulnerabilityReport, browserData, cveList) {
    for (let cve of cveList) {
        for (let browser of browserData) {
            if (await isVulnerable(browser.browser, browser.version, cve.condition)) {
                browser.numOfVulnerabilities++;
            }
        }
    }
    return browserData;
    // chromeList = new Array(81).fill(0)
    // firefoxList = new Array(75).fill(0)

    // for (let cve of vulnarabilityList) {
    //     for (let cpe of cve.affectedVersions) {
    //         if (cpe.versionEndExcluding) {

    //         } else if (cpe.versionEndIncluding) {

    //         } else {
    //             console.log('IM DIFFERENT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11')
    //         }

    //         if (cpe.vulnerable) {
    //             if (cpe.cpe23Uri.includes(':chrome:')) {
    //                 for (let i = 0; i < chromeList.length; i++) {

    //                 }
    //             }
    //             if (cpe.cpe23Uri.includes(':firefox:')) {

    //             }
    //         } else {
    //             //todo Check whether we should remove !cpe.vulnarable or not
    //         }
    //     }
    // }
}

async function generateVulnerabilityReport(browserVulnerabilityReport, browserData, vulnerabilityReportFile) {
    let fileContent = JSON.parse(vulnerabilityReportFile);
    let cveData = await simplifyCveFile(fileContent);
    let cveList = await cveParser(cveData); //todo check function
    browserData = await findVulnarabilitiesPerBrowser(browserVulnerabilityReport, browserData, cveList);
    return browserData;
}

async function main() {
    browserData = await csv()
        .fromFile(datasetDir + 'browser-data.csv')
    for (let browser of browserData) {
        browser.numOfVulnerabilities = 0;
    }
    let vulnerabilityReportFile = fs.readFileSync(datasetDir + 'nvdcve-1.1-2020.json');
    browserData = await generateVulnerabilityReport(browserVulnerabilityReport, browserData, vulnerabilityReportFile);

    vulnerabilityReportFile = fs.readFileSync(datasetDir + 'nvdcve-1.1-2019.json');
    browserData = await generateVulnerabilityReport(browserVulnerabilityReport, browserData, vulnerabilityReportFile);

    vulnerabilityReportFile = fs.readFileSync(datasetDir + 'nvdcve-1.1-2018.json');
    browserData = await generateVulnerabilityReport(browserVulnerabilityReport, browserData, vulnerabilityReportFile);

}

main();